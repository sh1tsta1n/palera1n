name: Build palera1n

on:
  push:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'patches/**'
      - 'include/**'
      - 'Makefile'
      - 'CMakeLists.txt'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
        - 'src/**'
        - 'docs/**'
        - 'patches/**'
        - 'include/**'
        - 'Makefile'
        - 'CMakeLists.txt'
        - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build-Linux:
    strategy:
      matrix:
        triple:
        - aarch64-linux-musl
    runs-on: ubuntu-latest
    env:
      MBEDTLS_VERSION: 3.4.0
      LIBUSB_VERSION: 1.0.26
      READLINE_VERSION: 8.2
      SLANG_VERSION: 2.3.3
      NEWT_VERSION: 0.52.23
      GPM_VERSION: 1.20.7
      POPT_VERSION: 1.19

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build dependencies (packages)
        run: |
          sudo apt-get remove -y libssl-dev libreadline-dev
          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc
          sudo pip3 install jsonschema jinja2

      - name: Download toolchain checksum
        run: |
          curl -LO https://musl.cc/SHA512SUMS
          echo "TOOLCHAIN_CHECKSUM="$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV

      - name: Download toolchain (cached)
        id: toolchain_cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.triple }}-cross.tgz
          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain

      - name: Download toolchain
        if: steps.toolchain_cache.outputs.cache-hit != 'true'
        run: |
          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz

      - name: Setup environment
        run: |
          tar -xf ${{ matrix.triple }}-cross.tgz
          mkdir sysroot
          echo "$(pwd)/${{ matrix.triple }}-cross/bin" >> $GITHUB_PATH
          case ${{ matrix.triple }} in
            i486-linux-musl)
              echo "CHECKRA1N_NAME=linux-x86" >> $GITHUB_ENV
              echo "ARCH_NAME=i386" >> $GITHUB_ENV
              ;;
            x86_64-linux-musl)
              echo "CHECKRA1N_NAME=linux-x86_64" >> $GITHUB_ENV
              echo "ARCH_NAME=amd64" >> $GITHUB_ENV
              ;;
            armel-linux-musleabi)
              echo "CHECKRA1N_NAME=linux-armel" >> $GITHUB_ENV
              echo "ARCH_NAME=armel" >> $GITHUB_ENV
              ;;
            aarch64-linux-musl)
              echo "CHECKRA1N_NAME=linux-arm64" >> $GITHUB_ENV
              echo "ARCH_NAME=arm64" >> $GITHUB_ENV
              ;;
          esac
          echo "PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip" >> $GITHUB_ENV
          echo "DESTDIR=$(pwd)/sysroot" >> $GITHUB_ENV
          echo "PREFIX=/usr/local" >> $GITHUB_ENV
          echo "CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static" >> $GITHUB_ENV
          echo "CROSS_COMPILE=${{ matrix.triple }}-" >> $GITHUB_ENV
          mkdir -p $(pwd)/sysroot/usr/local/lib
          ln -sf $(pwd)/sysroot/usr/local/lib{,64}

      - name: Download dependencies (source code)
        run: |
          curl -LOOOOOOO \
            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \
            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \
            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \
            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \
            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \
            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \
            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz

          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz
          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2
          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz
          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2
          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz
          tar -xf ${{ env.GPM_VERSION }}.tar.gz
          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz
          git clone --depth=1 https://github.com/libimobiledevice/libplist
          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue
          git clone --depth=1 https://github.com/libimobiledevice/libirecovery
          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd
          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice

      - name: Build Mbed TLS
        run: |
          cd mbedtls-${{ env.MBEDTLS_VERSION }}
          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=true \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \
            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \
            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \
            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \
            -DCMAKE_FIND_ROOT_PATH="${{ env.DESTDIR }}" \
            -DCMAKE_INSTALL_PREFIX="${{ env.PREFIX }}" \
            -DENABLE_TESTING=OFF \
            -DENABLE_PROGRAMS=OFF \
            -DCMAKE_INSTALL_SYSCONFDIR="/etc"
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build libusb
        run: |
          cd libusb-${{ env.LIBUSB_VERSION }}
          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build readline
        run: |
          cd readline-${{ env.READLINE_VERSION }}
          ./configure ${{ env.CONFIGURE_ARGS }}
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build S-Lang
        run: |
          cd slang-${{ env.SLANG_VERSION }}
          ./configure \
            ${{ env.CONFIGURE_ARGS }} \
            --without-x \
            --without-pcre \
            --without-onig \
            --without-z \
            --without-png \
            --without-iconv
          gmake -j$(sysctl -n hw.ncpu) static
          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build GPM
        run: |
          cd gpm-${{ env.GPM_VERSION }}
          cat ../patches/gpm/*.patch | patch -sN -d . -p1
          ./autogen.sh
          ./configure \
            ${{ env.CONFIGURE_ARGS }}
          gmake -j$(sysctl -n hw.ncpu)
          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build popt
        run: |
          cd popt-popt-${{ env.POPT_VERSION }}-release
          autoreconf -fiv
          ./configure \
            ${{ env.CONFIGURE_ARGS }} \
            --without-libiconv-prefix \
            --without-libintl-prefix \
            --disable-nls \
            --disable-werror
          gmake -j$(sysctl -n hw.ncpu)
          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build newt
        run: |
          cd newt-${{ env.NEWT_VERSION }}
          ./configure \
            ${{ env.CONFIGURE_ARGS }} \
            --with-readline=gnu \
            --without-python \
            --without-tcl \
            --disable-nls \
            --with-gpm-support
          gmake -j$(sysctl -n hw.ncpu) libnewt.a
          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}
          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig
          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib
          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include
          cd ..

      - name: Build libplist
        run: |
          cd libplist
          autoreconf -fiv
          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build libimobiledevice-glue
        run: |
          cd libimobiledevice-glue
          autoreconf -fiv
          ./configure ${{ env.CONFIGURE_ARGS }}
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build libirecovery (sorta)
        run: |
          sudo mv /usr/local /usr/local.bak
          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local
          cd libirecovery
          autoreconf -fiv
          ./configure ${{ env.CONFIGURE_ARGS }}
          echo -e 'all:\ninstall:' > tools/Makefile
          make -ij$(nproc)
          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}
          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib
          cd ..

      - name: Build libusbmuxd
        run: |
          cd libusbmuxd
          autoreconf -fiv
          ./configure ${{ env.CONFIGURE_ARGS }}
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build libimobiledevice
        run: |
          cd libimobiledevice
          autoreconf -fiv
          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug
          echo -e 'all:\ninstall:' > tools/Makefile
          make -j$(nproc)
          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}
          cd ..
          sudo rm /usr/local
          sudo mv /usr/local.bak /usr/local

      - name: Build palera1n
        run: |
          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root
          find dep_root -name '*.so' -delete
          find dep_root -name '*.la' -delete
          CC="${{ matrix.triple }}-gcc" make -j$(nproc)

      - name: Seperate debug symbols
        run: |
          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug
          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n
          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n
          chmod -x palera1n.debug
      
      - name: Prepare artifact
        run: |
          mkdir ready
          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug
          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}
          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7

      - name: Upload Latest Artifact
        uses: actions/upload-artifact@v3
        with:
          name: iso
          path: |
            ready/palera1n-linux-arm64
                      retention-days: 90
            
